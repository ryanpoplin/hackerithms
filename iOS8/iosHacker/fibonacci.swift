//
//  Fibonacci.swift
//  iosHacker
//
//  Created by Byrdann Fox on 1/4/15.
//  Copyright (c) 2015 ByrdannFox, Inc. All rights reserved.
//

import Foundation

/* HOW MOVE POINTS AWAY FROM THE LEFT...? */

// model object...
class Fibonacci {
    
    // the fibonacci method takes one integer argument, and returns an array of integers...
    // how long do we want our sequence to be?
    func fibonacciSequence(arg:Int) -> Array<Int> {
        
        // create an array literal that contains the first three 'modern usage' integers of the...
        // fibonacci sequence...(in mathematics we can utilize just [1, 1])...
        // make the array literal mutable...
        var fibonacciArr = [0, 1, 1]
        
        // starting at the fibonacciArr array's third element reference...
        // (we don't care about adding the first element because it's zero...
        for var i = 3; i < arg; i += 1 {
            
            // we start by taking the reference return values of the second and third elements...
            // and add them together...
            var fiboArithmetic = fibonacciArr[i - 2] + fibonacciArr[i - 1]
            
            // we then insert the the fiboArithmetic value as the fourth element of the array...
            fibonacciArr.insert(fiboArithmetic, atIndex: i)
            
            // while our initial loop counter value is less than our 'arg' arguments value...
            // we increment the counter value by one for dynamic array element reference...
            // until the value of the loop counter is not less than the 'arg' value...
            
        }
        
        // return the array...
        return fibonacciArr
        
    }
    
    // the fibonacciSequenceReversed method takes one integer value, and two arrays of integers...
    // as arguments...
    // it returns an array of integers...
    func fibonacciSequenceReversed(count: Int, reversedArr: [Int], fiboArr: [Int]) -> Array<Int> {
        
        // make the passed literal array mutable...
        var fibonacciArr = fiboArr
        
        // the loop counter i is set at zero to run it's statement as many times as there...
        // are elements in the array and dynamically increments to access the array...
        // with the expressive [i] syntax...
        for var i = 0; i < count; i += 1 {
            
            // take the contents of the reversed fibonacci sequence array, negate it, and...
            // append it to the end of the fibonacciArr array...
            // fibonacciArr.append(-reversedArr[i])
            
        }
        
        // return the array...
        return fibonacciArr
        
    }
    
}